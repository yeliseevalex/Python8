# Задаємо рядок str1, який складається з двох частин. Перший рядок закривається в кінці, тому другий рядок продовжує його.
str1 = ("Hello"
        " 'Name'")
print(str1)

# str2 містить символи подвійних лапок всередині рядка.
str2 = 'Hello "Name"' #'a', '5', 'OOO "Company"'
print(str2)

# str3 використовує потрійні лапки для розбиття рядка на кілька рядків.
str3 = """Hello
Name"""
print(str3)

# Аналогічно, як і str3, тільки за допомогою одинарних потрійних лапок.
str4 = '''Hello
Name'''
print(str4)

# З’єднуємо два рядки '5' і '5' за допомогою операції +.
str5 = '5' + '5'
print(str5)

# str6 додає до рядка "Hello" число str5, яке спочатку потрібно перетворити в рядок.
str6 = "Hello" + str5
print(str6)

# Повторюємо рядок 'Hello' 100 разів.
str7 = 'Hello' * 100
print(str7)

# Задаємо рядок str8 і застосовуємо індексацію для доступу до окремих символів.
str8 = "Hello Name"
# 0123456789
# ...-3-2-1
print(str8[0])  # Виводить перший символ рядка
print(str8[1])  # Виводить другий символ
print(str8[2])  # Виводить третій символ
print(str8[5])  # Виводить шостий символ
print(str8[-1])  # Виводить останній символ рядка
print(str8[9])  # Виводить десятий символ
print(str8[-2])  # Виводить другий з кінця символ
print(str8[-6])  # Виводить шостий з кінця символ
print(str8[10])  # Виводить символ на індексі 10
print(str8[-3:-1])  # Виводить символи з індексами від -3 до -1
print(str8[3:])  # Виводить всі символи з індексом від 3 до кінця
print(str8[-3:])  # Виводить останні три символи
print(str8[:7])  # Виводить символи від початку до індексу 7
print(str8[:-7])  # Виводить всі символи, крім останніх 7
print(str8[1:7])  # Виводить символи з індексу 1 до 7
print(str8[0:7:2])  # Виводить кожен другий символ з індексу 0 до 7
print(str8[::-1])  # Виводить рядок у зворотному порядку

# Оформляємо рядок із змінними через форматування за допомогою оператора %
name = "Bob"
age = 25
str9 = "My name is %s and I am %d" % (name, age)
print(str9)

# Інші способи форматування рядків
print("My name is", name, "and I am", age)  # Використання ком виводить значення змінних
print("My name is " + name + " and I am", age)  # Конкатенація рядків
print("My name is %s and I am %d" % (name, age))  # Форматування через %

# Використовуємо метод форматування строк .format()
str10 = "My name is {0} and I am {1}".format(name, age)
print(str10)

# Форматування через f-рядки (f-strings) - це новий метод в Python 3.6+
str11 = f"My name is {name} and I am {age} {10} {[1,2,3]}"
print(str11)

# Спеціальні символи для переходу на новий рядок і для табуляції
str12 = "Hello\nName"  # Перехід на новий рядок
print(str12)

str13 = "Hello\tName"  # Табуляція між словами
print(str13)

# Використовуємо шляхи до файлів
str14 = "E:/NewProject2/main.py"  # Шлях на диску в Windows
print(str14)

str15 = r"E:\NewProject2\main.py"  # Так само, але з сирим рядком (raw string), який не інтерпретує escape-символи
print(str15)

# Обчислюємо довжину рядка за допомогою len()
str16 = "Hello Name"
print(len(str16))  # Виводить кількість символів в рядку

# Пошук підрядків та заміни в рядку
str17 = "Hello Name Name Name Hello e e Name"
print(str17.find("e", 2, 10))  # Шукає перше входження 'e' у діапазоні індексів 2-10
print(str17.rfind("e", 0, 5))  # Шукає останнє входження 'e' у діапазоні індексів 0-5
print(str17.index('e', 5, 8))  # Пошук підрядка 'e' з виключенням ValueError, якщо не знайдено

# Різні способи заміни та розділення рядків
print(str17.replace("Name", "Bob", 1))  # Заміна першого входження "Name" на "Bob"
print(str17.split("Na"))  # Розділяє рядок за допомогою підрядка "Na" на список

# Приклад пошуку телефонних номерів
str18 = "+380505554545 +380955554545"
print(str18)
print(str18.replace(' ', '\n'))  # Замінює пробіли на новий рядок
print(str18.find('+38095'))  # Шукає перше входження номера телефону

# Перевірка, чи складається рядок з цифр чи літер
str19 = "123456"
str20 = "abcdef"
str21 = "ab12bc4"
str22 = "ab12bc4$%"

print(str19.isdigit())  # Перевіряє, чи є рядок цифрами
print(str20.isdigit())  # Перевіряє, чи є рядок цифрами

# Перевірка, чи складається рядок з букв або алфавітних символів
print(str19.isalpha())  # Перевіряє, чи є рядок лише літерами
print(str20.isalpha())  # Перевіряє, чи є рядок лише літерами

# Перевірка, чи складається рядок лише з алфавітних та цифрових символів
print(str19.isalnum())  # Перевіряє, чи є рядок літерами чи цифрами

# Перевірка регістру символів у рядку
str23 = "abc"
str24 = "ABC"
str25 = "aBc"
str26 = " \n \t"
str27 = "Hello Name"
str28 = "Hello name"

print(str23.islower())  # Перевіряє, чи всі символи в рядку в нижньому регістрі
print(str24.islower())  # Перевіряє, чи всі символи в рядку в нижньому регістрі

# Перевірка на верхній регістр
print(str23.isupper())  # Перевіряє, чи всі символи в рядку в верхньому регістрі
print(str24.isupper())  # Перевіряє, чи всі символи в рядку в верхньому регістрі

# Перевірка на пробільні символи
print(str23.isspace())  # Перевіряє, чи складається рядок лише з пробілів та екранованих символів

# Перевірка на формат "Title" (кожне слово починається з великої літери)
print(str23.istitle())  # Перевірка на стиль заголовка

# Перевірка на початок та кінець рядка
str29 = "Hello Name"
print(str29.startswith("H"))  # Перевірка, чи починається рядок з 'H'
print(str29.endswith("Hello"))  # Перевірка, чи закінчується рядок на 'Hello'

str30 = "hELLO Name"
str31 = "Hello NAME"
str32 = "hElLo NaMe"
str33 = "HELLO name"
str34 = "hello nAMe"
# Заміна першої літери на верхній регістр
print(str30.capitalize())  # Перетворює першу літеру на велику

# Заміна регістру всіх літер
print(str31.swapcase())  # Міняє регістр усіх літер

# Використання методу count для підрахунку входжень
print(str34.count('e', 5, 15))  # Підрахунок кількості входжень 'e' у діапазоні від 5 до 15

# Очищення пробілів з обох кінців рядка
str35 = " \t          Hello Name      \n"
print(str35.strip())  # Видаляє всі зайві пробіли на початку і в кінці рядка

# Центрування та вирівнювання рядка
str36 = "[INFO] Start DB"
print(str36.center(120, '-'))  # Центрує рядок з використанням '-'

